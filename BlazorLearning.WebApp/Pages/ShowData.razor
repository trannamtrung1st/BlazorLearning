@page "/showdata"
@attribute [StreamRendering(true)]
@attribute [RenderModeServer]
@inject HttpClient HttpClient;

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates showing data from the server.</p>

<p>
    <button class="btn btn-primary" @onclick="Increase">Increase counter</button>
    &nbsp;
    Counter: @Counter
</p>

<p>
    <button class="btn btn-primary" @onclick="FetchWeathers">Fetch weathers</button>
</p>

@if (Forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in Forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private int Counter { get; set; }

    private WeatherForecast[] Forecasts;

    void Increase() => Counter++;

    async Task FetchWeathers()
    {
        Forecasts = await HttpClient.GetFromJsonAsync<WeatherForecast[]>("/api/weathers");
    }

    protected override async Task OnInitializedAsync()
    {
        await FetchWeathers();
    }
}
